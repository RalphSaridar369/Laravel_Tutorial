this is for permissions

- Install Jwt Tymon Authentication
- Set up jwt: vendor publish, jwt generate secret key,
- Manage the guards and providers in config/auth.php
- Make Models of Users in guards
- Manage Controllers of users in guards (put Authenticatable, login, logout, and token functions)
- Make AssignGuard Middleware (assign guards and authenticate token)
- Make Validation Requests for login and put them in Controller
- Manage routes using middleware

Using Multi-guards Authorization and JWT Authentication to set different routes for different admins/users.
References:
- JWT By Khaldoun
- [Article from Net](https://jinoantony.com/blog/multi-user-api-authentication-using-laravel-jwt)
- Mohammad and Hassan added sth to Middleware to make it work

<?php

namespace App\Http\Middleware;

use Closure;
use JWTAuth;
use Exception;
use Illuminate\Support\Facades\Auth;
use Tymon\JWTAuth\Http\Middleware\BaseMiddleware;

class AssignGuard extends BaseMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
public function handle($request, Closure $next, $guard)
    {
        if ($guard == "superadmin" && Auth::guard($guard)->check()) {
        } else if ($guard == "schooladmin" && Auth::guard($guard)->check()) {
        } else if ($guard == "teacher" && Auth::guard($guard)->check()) {
        } else if ($guard == "student" && Auth::guard($guard)->check()) {
        } else {
            return response()->json(['status' => 'Not authorized']);
        }

        try {
            $user = JWTAuth::parseToken()->authenticate();
        } catch (Exception $e) {
            if ($e instanceof \Tymon\JWTAuth\Exceptions\TokenInvalidException) {
                return response()->json(['status' => 'Not authorized']);
            } else if ($e instanceof \Tymon\JWTAuth\Exceptions\TokenExpiredException) {
                return response()->json(['status' => 'Not authorized']);
            } else {
                return response()->json(['status' => 'Not authorized']);
            }
        }
        return $next($request);
    }
}